#include <stdio.h>
struct Process
{
    int id;
    int priority;
    int burst_time;
};
void schedulePriority(struct Process processes[], int n) 
{
    int time = 0;
    int remaining_time[n];
    int completed[n];

    for (int i = 0; i < n; i++) 
    {
        remaining_time[i] = processes[i].burst_time;
        completed[i] = 0;
    }
    printf("Execution Order: ");
    while (1) 
    {
        int max_priority = -1;
        int max_index = -1;
        for (int i = 0; i < n; i++) 
        {
            if (completed[i] == 0 && processes[i].priority > max_priority && processes[i].burst_time > 0)
            {
                max_priority = processes[i].priority;
                max_index = i;
            }
        }
        if (max_index == -1) 
        {
            break;
        }
        printf("P%d ", processes[max_index].id);
        remaining_time[max_index]--;
        time++;
        if (remaining_time[max_index] == 0) {
            completed[max_index] = 1;
        }
    }
    printf("\n");
}
int main() 
{
    struct Process processes[] = {{1, 3, 6}, {2, 1, 8}, {3, 2, 7}, {4, 4, 3}};
    int n = sizeof(processes) / sizeof(processes[0]);
    printf("Number of Processes: %d\n", n);
    schedulePriority(processes, n);
    return 0;
}
