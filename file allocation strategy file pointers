#include <stdio.h>
#include <stdlib.h>
#define MAX_BLOCKS 100
#define MAX_FILES 10
struct File
{
    int fileId;                 // Unique file identifier
    int indexBlock[MAX_BLOCKS]; // Index block containing pointers to data blocks
    int numBlocks;              // Number of blocks allocated to the file
};
struct File* createFile(int fileId) 
{
    struct File* newFile = (struct File*)malloc(sizeof(struct File));
    newFile->fileId = fileId;
    newFile->numBlocks = 0;
    for (int i = 0; i < MAX_BLOCKS; i++) {
        newFile->indexBlock[i] = -1; // -1 indicates an unallocated block
    }
    return newFile;
}
void allocateBlock(struct File* file, int blockId) 
{
    if (file->numBlocks < MAX_BLOCKS)
    {
        file->indexBlock[file->numBlocks] = blockId;
        file->numBlocks++;
        printf("Block %d allocated to File %d\n", blockId, file->fileId);
    } else {
        printf("File %d is at maximum capacity, cannot allocate more blocks.\n", file->fileId);
    }
}
void readFile(struct File* file)
{
    printf("File %d content: ", file->fileId);
    for (int i = 0; i < file->numBlocks; i++)
    {
        printf("%d ", file->indexBlock[i]);
    }
    printf("\n");
}
void deleteFile(struct File* file) 
{
    free(file);
}
int main() 
{
    struct File* file1 = createFile(1);
    struct File* file2 = createFile(2);
    allocateBlock(file1, 10);
    allocateBlock(file1, 20);
    allocateBlock(file1, 30);
    allocateBlock(file2, 40);
    allocateBlock(file2, 50);
    readFile(file1);
    readFile(file2);
    deleteFile(file1);
    deleteFile(file2);
    return 0;
}
