#include <stdio.h>

// Process structure
struct Process {
    int id;
    int arrival_time;
    int burst_time;
    int priority;
    int remaining_time;
};

// Function to perform scheduling based on Preemptive Priority Scheduling
void schedulePreemptivePriority(struct Process processes[], int n) {
    int time = 0; // Current time
    int completed = 0; // Counter for completed processes

    printf("Execution Order: ");

    while (completed < n) {
        int highest_priority = int MAX;
        int selected_process = -1;

        // Find the process with the highest priority that has arrived and is ready to execute
        for (int i = 0; i < n; i++) {
            if (processes[i].arrival_time <= time && processes[i].remaining_time > 0 && processes[i].priority < highest_priority) {
                highest_priority = processes[i].priority;
                selected_process = i;
            }
        }

        if (selected_process == -1) {
            // No process is ready to execute, move to the next time unit
            time++;
            continue;
        }

        // Execute the selected process for one time unit
        printf("P%d ", processes[selected_process].id);
        processes[selected_process].remaining_time--;
        time++;

        // If the process is completed, update the completion time
        if (processes[selected_process].remaining_time == 0) {
            completed++;
        }
    }

    printf("\n");
}

int main() {
    // Example processes with arrival time, burst time, and priority
    struct Process processes[] = {{1, 0, 6, 2}, {2, 2, 8, 1}, {3, 3, 7, 3}, {4, 4, 3, 4}};

    int n = sizeof(processes) / sizeof(processes[0]);

    printf("Number of Processes: %d\n", n);

    schedulePreemptivePriority(processes, n);

    return 0;
}
